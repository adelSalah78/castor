// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: inter.proto

package common_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InterService_KeepAndApplyReservation_FullMethodName = "/io.carbynestack.castor.common.grpc.InterService/KeepAndApplyReservation"
	InterService_UpdateReservation_FullMethodName       = "/io.carbynestack.castor.common.grpc.InterService/UpdateReservation"
)

// InterServiceClient is the client API for InterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterServiceClient interface {
	KeepAndApplyReservation(ctx context.Context, in *GrpcReservation, opts ...grpc.CallOption) (*GrpcEmpty, error)
	UpdateReservation(ctx context.Context, in *GrpcUpdateReservationRequest, opts ...grpc.CallOption) (*GrpcEmpty, error)
}

type interServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterServiceClient(cc grpc.ClientConnInterface) InterServiceClient {
	return &interServiceClient{cc}
}

func (c *interServiceClient) KeepAndApplyReservation(ctx context.Context, in *GrpcReservation, opts ...grpc.CallOption) (*GrpcEmpty, error) {
	out := new(GrpcEmpty)
	err := c.cc.Invoke(ctx, InterService_KeepAndApplyReservation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interServiceClient) UpdateReservation(ctx context.Context, in *GrpcUpdateReservationRequest, opts ...grpc.CallOption) (*GrpcEmpty, error) {
	out := new(GrpcEmpty)
	err := c.cc.Invoke(ctx, InterService_UpdateReservation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterServiceServer is the server API for InterService service.
// All implementations must embed UnimplementedInterServiceServer
// for forward compatibility
type InterServiceServer interface {
	KeepAndApplyReservation(context.Context, *GrpcReservation) (*GrpcEmpty, error)
	UpdateReservation(context.Context, *GrpcUpdateReservationRequest) (*GrpcEmpty, error)
	mustEmbedUnimplementedInterServiceServer()
}

// UnimplementedInterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInterServiceServer struct {
}

func (UnimplementedInterServiceServer) KeepAndApplyReservation(context.Context, *GrpcReservation) (*GrpcEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeepAndApplyReservation not implemented")
}
func (UnimplementedInterServiceServer) UpdateReservation(context.Context, *GrpcUpdateReservationRequest) (*GrpcEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReservation not implemented")
}
func (UnimplementedInterServiceServer) mustEmbedUnimplementedInterServiceServer() {}

// UnsafeInterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterServiceServer will
// result in compilation errors.
type UnsafeInterServiceServer interface {
	mustEmbedUnimplementedInterServiceServer()
}

func RegisterInterServiceServer(s grpc.ServiceRegistrar, srv InterServiceServer) {
	s.RegisterService(&InterService_ServiceDesc, srv)
}

func _InterService_KeepAndApplyReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcReservation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterServiceServer).KeepAndApplyReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterService_KeepAndApplyReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterServiceServer).KeepAndApplyReservation(ctx, req.(*GrpcReservation))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterService_UpdateReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcUpdateReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterServiceServer).UpdateReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterService_UpdateReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterServiceServer).UpdateReservation(ctx, req.(*GrpcUpdateReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InterService_ServiceDesc is the grpc.ServiceDesc for InterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.carbynestack.castor.common.grpc.InterService",
	HandlerType: (*InterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KeepAndApplyReservation",
			Handler:    _InterService_KeepAndApplyReservation_Handler,
		},
		{
			MethodName: "UpdateReservation",
			Handler:    _InterService_UpdateReservation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inter.proto",
}
