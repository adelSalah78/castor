// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: intra.proto

package common_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IntraService_GetTelemetryData_FullMethodName               = "/io.carbynestack.castor.common.grpc.IntraService/GetTelemetryData"
	IntraService_ActivateFragmentsForTupleChunk_FullMethodName = "/io.carbynestack.castor.common.grpc.IntraService/ActivateFragmentsForTupleChunk"
	IntraService_GetTupleList_FullMethodName                   = "/io.carbynestack.castor.common.grpc.IntraService/GetTupleList"
	IntraService_UploadTupleChunk_FullMethodName               = "/io.carbynestack.castor.common.grpc.IntraService/UploadTupleChunk"
)

// IntraServiceClient is the client API for IntraService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntraServiceClient interface {
	GetTelemetryData(ctx context.Context, in *GrpcTelemetryDataRequest, opts ...grpc.CallOption) (*GrpcTelemetryDataResponse, error)
	ActivateFragmentsForTupleChunk(ctx context.Context, in *GrpcTupleChunkRequest, opts ...grpc.CallOption) (*GrpcEmpty, error)
	GetTupleList(ctx context.Context, in *GrpcTuplesListRequest, opts ...grpc.CallOption) (*GrpcTuplesListResponse, error)
	UploadTupleChunk(ctx context.Context, in *GrpcUploadTupleChunkRequest, opts ...grpc.CallOption) (*GrpcUploadTupleChunkResponse, error)
}

type intraServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntraServiceClient(cc grpc.ClientConnInterface) IntraServiceClient {
	return &intraServiceClient{cc}
}

func (c *intraServiceClient) GetTelemetryData(ctx context.Context, in *GrpcTelemetryDataRequest, opts ...grpc.CallOption) (*GrpcTelemetryDataResponse, error) {
	out := new(GrpcTelemetryDataResponse)
	err := c.cc.Invoke(ctx, IntraService_GetTelemetryData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intraServiceClient) ActivateFragmentsForTupleChunk(ctx context.Context, in *GrpcTupleChunkRequest, opts ...grpc.CallOption) (*GrpcEmpty, error) {
	out := new(GrpcEmpty)
	err := c.cc.Invoke(ctx, IntraService_ActivateFragmentsForTupleChunk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intraServiceClient) GetTupleList(ctx context.Context, in *GrpcTuplesListRequest, opts ...grpc.CallOption) (*GrpcTuplesListResponse, error) {
	out := new(GrpcTuplesListResponse)
	err := c.cc.Invoke(ctx, IntraService_GetTupleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intraServiceClient) UploadTupleChunk(ctx context.Context, in *GrpcUploadTupleChunkRequest, opts ...grpc.CallOption) (*GrpcUploadTupleChunkResponse, error) {
	out := new(GrpcUploadTupleChunkResponse)
	err := c.cc.Invoke(ctx, IntraService_UploadTupleChunk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntraServiceServer is the server API for IntraService service.
// All implementations must embed UnimplementedIntraServiceServer
// for forward compatibility
type IntraServiceServer interface {
	GetTelemetryData(context.Context, *GrpcTelemetryDataRequest) (*GrpcTelemetryDataResponse, error)
	ActivateFragmentsForTupleChunk(context.Context, *GrpcTupleChunkRequest) (*GrpcEmpty, error)
	GetTupleList(context.Context, *GrpcTuplesListRequest) (*GrpcTuplesListResponse, error)
	UploadTupleChunk(context.Context, *GrpcUploadTupleChunkRequest) (*GrpcUploadTupleChunkResponse, error)
	mustEmbedUnimplementedIntraServiceServer()
}

// UnimplementedIntraServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIntraServiceServer struct {
}

func (UnimplementedIntraServiceServer) GetTelemetryData(context.Context, *GrpcTelemetryDataRequest) (*GrpcTelemetryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTelemetryData not implemented")
}
func (UnimplementedIntraServiceServer) ActivateFragmentsForTupleChunk(context.Context, *GrpcTupleChunkRequest) (*GrpcEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateFragmentsForTupleChunk not implemented")
}
func (UnimplementedIntraServiceServer) GetTupleList(context.Context, *GrpcTuplesListRequest) (*GrpcTuplesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTupleList not implemented")
}
func (UnimplementedIntraServiceServer) UploadTupleChunk(context.Context, *GrpcUploadTupleChunkRequest) (*GrpcUploadTupleChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadTupleChunk not implemented")
}
func (UnimplementedIntraServiceServer) mustEmbedUnimplementedIntraServiceServer() {}

// UnsafeIntraServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntraServiceServer will
// result in compilation errors.
type UnsafeIntraServiceServer interface {
	mustEmbedUnimplementedIntraServiceServer()
}

func RegisterIntraServiceServer(s grpc.ServiceRegistrar, srv IntraServiceServer) {
	s.RegisterService(&IntraService_ServiceDesc, srv)
}

func _IntraService_GetTelemetryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcTelemetryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntraServiceServer).GetTelemetryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntraService_GetTelemetryData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntraServiceServer).GetTelemetryData(ctx, req.(*GrpcTelemetryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntraService_ActivateFragmentsForTupleChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcTupleChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntraServiceServer).ActivateFragmentsForTupleChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntraService_ActivateFragmentsForTupleChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntraServiceServer).ActivateFragmentsForTupleChunk(ctx, req.(*GrpcTupleChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntraService_GetTupleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcTuplesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntraServiceServer).GetTupleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntraService_GetTupleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntraServiceServer).GetTupleList(ctx, req.(*GrpcTuplesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntraService_UploadTupleChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcUploadTupleChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntraServiceServer).UploadTupleChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntraService_UploadTupleChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntraServiceServer).UploadTupleChunk(ctx, req.(*GrpcUploadTupleChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IntraService_ServiceDesc is the grpc.ServiceDesc for IntraService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntraService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.carbynestack.castor.common.grpc.IntraService",
	HandlerType: (*IntraServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTelemetryData",
			Handler:    _IntraService_GetTelemetryData_Handler,
		},
		{
			MethodName: "ActivateFragmentsForTupleChunk",
			Handler:    _IntraService_ActivateFragmentsForTupleChunk_Handler,
		},
		{
			MethodName: "GetTupleList",
			Handler:    _IntraService_GetTupleList_Handler,
		},
		{
			MethodName: "UploadTupleChunk",
			Handler:    _IntraService_UploadTupleChunk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "intra.proto",
}
